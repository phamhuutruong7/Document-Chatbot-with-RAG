#!/usr/bin/env python3
"""
Create a comprehensive content generation master script.
Runs all content generation scripts and provides a final summary.
"""

import os
import subprocess
import logging
from datetime import datetime

# Setup logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def run_script(script_name, description):
    """Run a content generation script and return success status."""
    try:
        script_path = os.path.join("scripts", script_name)
        logger.info(f"üöÄ Running {description}...")
        
        result = subprocess.run(
            ["python", script_path],
            capture_output=True,
            text=True,
            timeout=60
        )
        
        if result.returncode == 0:
            logger.info(f"‚úÖ Successfully completed {description}")
            return True
        else:
            logger.error(f"‚ùå Failed {description}: {result.stderr}")
            return False
            
    except subprocess.TimeoutExpired:
        logger.error(f"‚è∞ Timeout running {description}")
        return False
    except Exception as e:
        logger.error(f"üí• Error running {description}: {str(e)}")
        return False

def count_documents_and_size():
    """Count total documents and calculate total size."""
    base_dir = os.path.join("data", "documents")
    total_files = 0
    total_size = 0
    
    for root, dirs, files in os.walk(base_dir):
        for file in files:
            if file.endswith(('.txt', '.pdf', '.md')):
                filepath = os.path.join(root, file)
                try:
                    file_size = os.path.getsize(filepath)
                    total_size += file_size
                    total_files += 1
                except OSError:
                    pass
    
    return total_files, total_size

def create_final_summary_report():
    """Create a comprehensive summary report."""
    content = """DOCUMENT CHATBOT KNOWLEDGE BASE SUMMARY
======================================

COMPREHENSIVE PC CUSTOMER SUPPORT DOCUMENTATION
Generated: {}

KNOWLEDGE BASE STATISTICS
------------------------
üìä Total Documents: {}
üíæ Total Size: {} KB ({} MB)
üóÇÔ∏è Categories: 6 specialized areas
üìö Content Types: Manuals, Guides, Training, Technical Docs

DOCUMENT CATEGORIES
------------------

1. PC-MANUALS (Hardware Documentation)
   ‚Ä¢ Manufacturer-specific manuals (HP, Lenovo, Dell, ASUS)
   ‚Ä¢ Desktop setup guides
   ‚Ä¢ Laptop configuration instructions
   ‚Ä¢ Gaming PC optimization guides
   ‚Ä¢ All-in-one computer setup

2. TROUBLESHOOTING (Problem Resolution)
   ‚Ä¢ CPU troubleshooting procedures
   ‚Ä¢ Wi-Fi connectivity issues
   ‚Ä¢ Windows performance optimization
   ‚Ä¢ Systematic diagnostic flowcharts
   ‚Ä¢ Blue screen error resolution

3. TRAINING (Customer Service)
   ‚Ä¢ Customer service scenarios
   ‚Ä¢ Product knowledge base
   ‚Ä¢ Sales objection handling
   ‚Ä¢ Troubleshooting flowcharts
   ‚Ä¢ Professional communication guides

4. TECHNICAL (Advanced Documentation)
   ‚Ä¢ Motherboard compatibility matrices
   ‚Ä¢ Performance benchmarking guides
   ‚Ä¢ Advanced troubleshooting procedures
   ‚Ä¢ Component specification details
   ‚Ä¢ Professional diagnostic techniques

5. SPECIALIZED (Category-Specific Guides)
   ‚Ä¢ Gaming PC complete guide
   ‚Ä¢ Professional workstation systems
   ‚Ä¢ Budget PC building strategies
   ‚Ä¢ Component selection guides
   ‚Ä¢ Upgrade path planning

6. FAQS (Common Questions)
   ‚Ä¢ AMD gaming setup procedures
   ‚Ä¢ NVIDIA optimization guides
   ‚Ä¢ Common PC questions and answers
   ‚Ä¢ Quick reference materials

CUSTOMER SUPPORT COVERAGE
-------------------------

‚úÖ HARDWARE SUPPORT:
   ‚Ä¢ Component compatibility checking
   ‚Ä¢ Installation and setup guidance
   ‚Ä¢ Performance optimization
   ‚Ä¢ Upgrade recommendations
   ‚Ä¢ Troubleshooting hardware issues

‚úÖ SOFTWARE SUPPORT:
   ‚Ä¢ Operating system optimization
   ‚Ä¢ Driver installation guidance
   ‚Ä¢ Performance tuning
   ‚Ä¢ Software compatibility issues
   ‚Ä¢ System maintenance procedures

‚úÖ CUSTOMER PERSONAS:
   ‚Ä¢ First-time PC buyers
   ‚Ä¢ Gaming enthusiasts
   ‚Ä¢ Professional users
   ‚Ä¢ Students on budget
   ‚Ä¢ Elderly customers
   ‚Ä¢ Small business owners
   ‚Ä¢ Content creators

‚úÖ TECHNICAL LEVELS:
   ‚Ä¢ Basic user support
   ‚Ä¢ Intermediate troubleshooting
   ‚Ä¢ Advanced technical procedures
   ‚Ä¢ Professional-grade solutions

USE CASE EXAMPLES
----------------

Gaming Customer:
"I want to build a gaming PC for under $1000 that can play Cyberpunk 2077"
‚Üí Gaming PC guide provides detailed component recommendations
‚Üí Performance expectations clearly outlined
‚Üí Upgrade path planning included

Business Professional:
"We need 5 computers for our office that can handle video conferencing and design work"
‚Üí Professional workstation guide covers business needs
‚Üí Bulk purchasing considerations included
‚Üí Business support options detailed

Budget-Conscious Student:
"I need a reliable computer for college under $500"
‚Üí Budget PC guide provides multiple options
‚Üí Used component buying guidance included
‚Üí Student-specific recommendations

Elderly Customer:
"My computer is slow and I just need something simple for email"
‚Üí Customer service scenarios provide proper approach
‚Üí Simple setup instructions available
‚Üí Extended support options covered

TECHNICAL CAPABILITIES
---------------------

üîß HARDWARE DIAGNOSTICS:
   ‚Ä¢ Step-by-step troubleshooting procedures
   ‚Ä¢ Component isolation techniques
   ‚Ä¢ Performance monitoring guidance
   ‚Ä¢ Thermal management strategies

üîç COMPATIBILITY CHECKING:
   ‚Ä¢ Socket and chipset compatibility
   ‚Ä¢ Memory and CPU matching
   ‚Ä¢ Power supply requirements
   ‚Ä¢ Graphics card compatibility

üìä PERFORMANCE ANALYSIS:
   ‚Ä¢ Benchmarking procedures
   ‚Ä¢ Bottleneck identification
   ‚Ä¢ Optimization strategies
   ‚Ä¢ Upgrade planning guidance

üõ†Ô∏è MAINTENANCE PROCEDURES:
   ‚Ä¢ Regular maintenance schedules
   ‚Ä¢ Cleaning procedures
   ‚Ä¢ Software optimization
   ‚Ä¢ Preventive care strategies

IMPLEMENTATION INSTRUCTIONS
--------------------------

1. START THE CHATBOT:
   streamlit run main.py

2. UPLOAD DOCUMENTS:
   ‚Ä¢ Use the web interface to upload document files
   ‚Ä¢ Process documents through RAG pipeline
   ‚Ä¢ Test with sample customer questions

3. SAMPLE TEST QUESTIONS:
   Basic Support:
   ‚Ä¢ "How do I set up my new HP computer?"
   ‚Ä¢ "Why is my computer running slowly?"
   ‚Ä¢ "What is your return policy?"

   Technical Support:
   ‚Ä¢ "My RTX 4070 isn't being detected"
   ‚Ä¢ "What CPU should I pair with an RTX 4080?"
   ‚Ä¢ "How do I troubleshoot blue screen errors?"

   Sales Support:
   ‚Ä¢ "I need a gaming PC for $1200"
   ‚Ä¢ "What's the difference between Intel and AMD?"
   ‚Ä¢ "Which components should I prioritize for video editing?"

4. EXPANSION OPTIONS:
   ‚Ä¢ Add manufacturer-specific PDFs manually
   ‚Ä¢ Create store-specific policy documents
   ‚Ä¢ Develop product-specific troubleshooting guides
   ‚Ä¢ Include warranty and service information

KNOWLEDGE BASE STRENGTHS
-----------------------

üìà COMPREHENSIVE COVERAGE:
   ‚Ä¢ All major PC categories covered
   ‚Ä¢ Multiple skill levels supported
   ‚Ä¢ Various customer types addressed
   ‚Ä¢ Technical depth available when needed

üéØ PRACTICAL FOCUS:
   ‚Ä¢ Real-world scenarios and solutions
   ‚Ä¢ Step-by-step procedures
   ‚Ä¢ Clear decision-making frameworks
   ‚Ä¢ Actionable recommendations

üîÑ SYSTEMATIC APPROACH:
   ‚Ä¢ Consistent troubleshooting methodology
   ‚Ä¢ Logical component selection guidance
   ‚Ä¢ Structured upgrade planning
   ‚Ä¢ Professional customer service techniques

üöÄ FUTURE-READY:
   ‚Ä¢ Current technology coverage
   ‚Ä¢ Upgrade path planning
   ‚Ä¢ Future technology considerations
   ‚Ä¢ Scalable knowledge structure

RECOMMENDED NEXT STEPS
---------------------

IMMEDIATE (This Week):
1. Test the chatbot with generated content
2. Upload documents via web interface
3. Verify RAG pipeline functionality
4. Test with sample customer scenarios

SHORT-TERM (This Month):
1. Add real manufacturer PDFs and manuals
2. Create store-specific policy documents
3. Develop FAQ based on actual customer questions
4. Train staff on using the chatbot system

LONG-TERM (Next Quarter):
1. Expand knowledge base with specialized content
2. Integrate with customer service workflows
3. Add automated document updating procedures
4. Implement customer feedback collection

MAINTENANCE SCHEDULE
-------------------

Weekly:
‚Ä¢ Review and update FAQ content
‚Ä¢ Add new customer scenarios
‚Ä¢ Update product recommendations

Monthly:
‚Ä¢ Add new product manuals and guides
‚Ä¢ Review and update technical documentation
‚Ä¢ Validate troubleshooting procedures

Quarterly:
‚Ä¢ Major knowledge base expansion
‚Ä¢ Technology trend updates
‚Ä¢ Comprehensive content review
‚Ä¢ Performance optimization

¬© 2024 PC Customer Support Documentation System
Complete Knowledge Base Generation Report
""".format(
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        "{}", "{}", "{}"  # Placeholders for file count and sizes
    )
    return content

def main():
    """Run comprehensive content generation and create summary."""
    
    print("üéØ COMPREHENSIVE KNOWLEDGE BASE GENERATION")
    print("=" * 60)
    
    # Scripts to run (some may already be completed)
    scripts_to_run = [
        ("check_status.py", "Document collection status check"),
    ]
    
    # Run scripts
    success_count = 0
    for script, description in scripts_to_run:
        if run_script(script, description):
            success_count += 1
    
    # Count documents and calculate sizes
    total_files, total_bytes = count_documents_and_size()
    total_kb = round(total_bytes / 1024, 1)
    total_mb = round(total_bytes / (1024 * 1024), 1)
    
    # Create final summary
    summary_content = create_final_summary_report()
    # Fill in the placeholders
    summary_content = summary_content.format(total_files, total_kb, total_mb)
    
    # Save summary report
    summary_path = os.path.join("data", "documents", "KNOWLEDGE_BASE_SUMMARY.txt")
    os.makedirs(os.path.dirname(summary_path), exist_ok=True)
    
    with open(summary_path, 'w', encoding='utf-8') as f:
        f.write(summary_content)
    
    # Display final results
    print(f"\nüéâ KNOWLEDGE BASE GENERATION COMPLETE!")
    print(f"=" * 60)
    print(f"üìä Total Documents: {total_files}")
    print(f"üíæ Total Size: {total_kb} KB ({total_mb} MB)")
    print(f"‚úÖ Scripts Completed: {success_count}/{len(scripts_to_run)}")
    print(f"üìÑ Summary Report: {summary_path}")
    
    print(f"\nüöÄ READY TO START!")
    print(f"-" * 30)
    print(f"1. Run your chatbot: streamlit run main.py")
    print(f"2. Upload documents via web interface")
    print(f"3. Test with customer support questions")
    print(f"4. Expand with manufacturer-specific content")
    
    print(f"\nüí° SAMPLE TEST QUESTIONS:")
    print(f"‚Ä¢ 'How do I set up my new Dell computer?'")
    print(f"‚Ä¢ 'What gaming PC should I buy for $1000?'")
    print(f"‚Ä¢ 'My PC is overheating, what should I do?'")
    print(f"‚Ä¢ 'What's the difference between Intel i5 and i7?'")
    print(f"‚Ä¢ 'How do I troubleshoot blue screen errors?'")
    
    print(f"\nüìö KNOWLEDGE AREAS COVERED:")
    print(f"‚úÖ Hardware setup and configuration")
    print(f"‚úÖ Component compatibility and selection")
    print(f"‚úÖ Troubleshooting and diagnostics")
    print(f"‚úÖ Performance optimization")
    print(f"‚úÖ Customer service scenarios")
    print(f"‚úÖ Technical support procedures")
    print(f"‚úÖ Gaming, workstation, and budget builds")
    print(f"‚úÖ Professional sales guidance")

if __name__ == "__main__":
    main()
